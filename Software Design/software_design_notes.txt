## Introduction to System Requirements and Architectural Drivers

> Requirements - Formal description of what we need to build.
> Types of requirements - Architectural drivers
  ^ Functional Requirements : What actually we need to perform as part of our system. It can be depicted by sequence diagram with all the use cases covered.
  ^ Quality Attributes      : It defines performance
      1. Non-functional requirements : Dictates the architecture of the system
        Ex : Scalability, Availability, Reliability, Security, Performance
  ^ System Constraints      : Limitations and boundaries
    1. Technical constraints
    2. Business constraints
    3. Global or regional constraints

## Most important quality attributes in Large Scale Systems
 ^ Response Time : The time between client sending a request and receiving a response. Processing Time + Waiting Time
 ^ Throughput    : Amount of work performed by our system in time.

 # Important Considerations
 ^ Measuring Response Time correctly
 ^ Response Time Distribution
   > Percentile : The xth percentile is the value below which x% of the values can be found
   > Tail Latency : The small percentage of response times from a system which take the longest.
  ^ Performance Degradation

# Scalability
# Availability
# Fault Tolerance : Enables our system to be operational and available even due to failures in one or more components
  ^ Tactics for achieving fault tolerance :
    > Failure prevention : Replication in multiple AZs
    > Failure Detection and isolation : Monitoring
    > Recovery 

# SLA - Service Level Agreement : legal contract that represents our quality service.
# SLO - Service Level Objective : Each SLO represents our target value that represents our service needs to meet.
# SLIs - Service Level Indicators : A quantitive measure of our compliance with SLOs

## Introduction to API Design

> An API is a contract between engineers who develop it and clients who consume it. It can be public, private and partner APIs.
> API Best Practices :
  - complete encapsulation of internal design
  - easy to use
  - keeping the operations idempotent
  - API Pagination
  - Asynchronous Operation
  - Versioning of our APIs

# REST APIS
  - HATEOS
      HATEOAS (Hypermedia as the Engine of Application State) is a principle of RESTful APIs that means an API response should include links to guide the client on       what actions it can take next.
      Instead of the client having to "guess" API endpoints, the API self-documents by providing links dynamically.

      REQUEST :
        GET /users/123

      RESPONSE :
        {
          "id": 123,
          "name": "Alice",
          "email": "alice@example.com",
          "_links": {
            "self": { "href": "/users/123" },
            "update": { "href": "/users/123", "method": "PUT" },
            "delete": { "href": "/users/123", "method": "DELETE" },
            "friends": { "href": "/users/123/friends", "method": "GET" }
          }
        }

  - Statelessness
  - Cachebility using E-tags
      ETags do not prevent computation on the server—they primarily help with network bandwidth and client-side caching. However, they can still be useful for 
      reducing load in certain cases.

      When a client makes a request:
        Without ETag:
          The server always processes the request, generates the response, and sends it.
          This means compute + bandwidth usage every time.

        With ETag (Client-Side Caching Enabled):
          The client stores the ETag and response.
          If the user requests the same resource again, the client sends If-None-Match: "<etag>".
          If the resource hasn't changed, the server responds with 304 Not Modified (without sending the full response).
          This saves network bandwidth, but yes, the server still computes the ETag.

## REST Resource
Every content in the REST architecture is considered a resource. The resource is analogous to the object in the object-oriented programming world. They can either be represented as text files, HTML pages, images, or any other dynamic data.
The REST Server provides access to these resources whereas the REST client consumes (accesses and modifies) these resources. Every resource is identified globally by means of a URI.

Below is the list of best practices that need to be considered with designing URI for web services:

- While defining resources, use plural nouns. Example: To identify user resource, use the name “users” for that resource.
- While using the long name for resources, use underscore or hyphen. Avoid using spaces between words. For example, to define authorized users resource, the name 
  can be “authorized_users” or “authorized-users”.
- The URI is case-insensitive, but as part of best practice, it is recommended to use lower case only.
- While developing URI, the backward compatibility must be maintained once it gets published. When the URI is updated, the older URI must be redirected to the new 
  one using the HTTP status code 300.
- Use appropriate HTTP methods like GET, PUT, DELETE, PATCH, etc. It is not needed or recommended to use these method names in the URI. Example: To get user 
  details of a particular ID, use /users/{id} instead of /getUser
- Use the technique of forward slashing to indicate the hierarchy between the resources and the collections. Example: To get the address of the user of a 
  particular id, we can use: /users/{id}/address

## Large Scale Systems Architectural Blocks

# Load Balancing
# Asynchronous Architecture
# API Gateway
  - Follows a software architecture pattern called API composition. The client application can call one single service.
# Content Delivery Networks.
# Relational Database and ACID transactions
# Microservice Architecture
# Event Driven Architecture
# CQRS - CQRS stands for Command Query Responsibility Segregation, and it’s a design pattern used in software development.In CQRS, you separate the parts of the system that handle reading data (queries) from the parts that handle updating data (commands). 
Each has its own responsibility.

✅ Better Performance – Reads and writes can be optimized separately.
✅ Scalability – Queries can be distributed to replicas, while writes go to the primary database.
✅ Flexibility – Different databases can be used for reads and writes (e.g., SQL for writes, NoSQL for fast reads).
✅ Security – Prevents unwanted modifications by keeping read and write operations separate
  
  
  
 
 
